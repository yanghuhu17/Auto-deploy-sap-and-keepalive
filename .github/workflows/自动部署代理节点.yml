name: 自动部署 Argo 隧道 CDN

on:
  workflow_dispatch:
    inputs:
      region:
        description: '选择部署区域'
        required: true
        default: 'US(free)'
        type: choice
        options:
          - SG(free)
          - US(free)
          - AWS-US(VA)
          - AWS-EU(Frankfurt)
          - GCP-US(IA)
          - Azure-US(VA)
          - Azure-JP(Tokyo)
          - Neo-UAE(Dubai)
      app_name:
        description: '应用名称（可选，留空则自动生成）'
        required: false
        default: ''

env:
  MEMORY: 256M

jobs:
  deploy-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install CF CLI
        run: |
          wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
          echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
          sudo apt-get update
          sudo apt-get install -y cf8-cli

      - name: Determine CF API endpoint and app name
        run: |
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          case "${{ github.event.inputs.region }}" in
            "SG(free)")
              echo "CF_API=https://api.cf.ap21.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=free-sg$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "US(free)")
              echo "CF_API=https://api.cf.us10-001.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=free-us$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "AWS-US(VA)")
              echo "CF_API=https://api.cf.us10-001.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=aws-usva$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "AWS-EU(Frankfurt)")
              echo "CF_API=https://api.cf.eu10-005.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=aws-eu$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "GCP-US(IA)")
              echo "CF_API=https://api.cf.us30.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=gcp-us$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "Azure-US(VA)")
              echo "CF_API=https://api.cf.us21.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=az-va$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "Azure-JP(Tokyo)")
              echo "CF_API=https://api.cf.jp20.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=az-jp$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "Neo-UAE(Dubai)")
              echo "CF_API=https://api.cf.neo-ae1.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=neo-uae$RANDOM_STR" >> $GITHUB_ENV
              ;;
          esac

          # 用户自定义 APP_NAME
          if [ -n "${{ github.event.inputs.app_name }}" ]; then
            echo "APP_NAME=${{ github.event.inputs.app_name }}" >> $GITHUB_ENV
          fi

          # 固定使用 Argo 隧道镜像
          echo "DOCKER_IMAGE=ghcr.io/eooce/nodejs:main" >> $GITHUB_ENV

          echo "使用 API: $CF_API"
          echo "应用名称: $APP_NAME"

      - name: Login to Cloud Foundry
        run: |
          cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}"
          ORG=$(cf orgs | sed -n '4p')
          SPACE=$(cf spaces | sed -n '4p')
          echo "ORG=$ORG" >> $GITHUB_ENV
          echo "SPACE=$SPACE" >> $GITHUB_ENV
          cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "$ORG" -s "$SPACE"

      - name: Deploy Argo CDN Node
        run: |
          if cf push ${{ env.APP_NAME }} --docker-image ${{ env.DOCKER_IMAGE }} -m ${{ env.MEMORY }} -k 256M --health-check-type port; then
            echo "✅ 部署成功"
          else
            cf delete ${{ env.APP_NAME }} -r -f
            echo "❌ 部署失败：资源不足，请明天早上8:20至9:00再尝试。"
            exit 1
          fi

      - name: Set environment variables
        run: |
          cf set-env ${{ env.APP_NAME }} NAME "SAP"
          cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID }}"
          cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
          cf set-env ${{ env.APP_NAME }} NEZHA_PORT "${{ secrets.NEZHA_PORT }}"
          cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
          cf set-env ${{ env.APP_NAME }} ARGO_PORT "${{ secrets.ARGO_PORT }}"
          cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN }}"
          cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH }}"
          cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
          cf set-env ${{ env.APP_NAME }} CFIP "${{ secrets.CFIP || 'cf.877774.xyz' }}"
          cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
          cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
          cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"

      - name: Restage application
        run: cf restage ${{ env.APP_NAME }}

      - name: Verify deployment
        run: |
          cf app ${{ env.APP_NAME }}
          echo "✅ 部署完成！"

      - name: 输出 vmess 链接
        run: |
          ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
          if [ -n "$ROUTE" ]; then
            VMESS=$(echo -n '{"v":"2","ps":"SAP-Argo","add":"'"$ROUTE"'","port":"443","id":"'"${{ secrets.UUID }}"'","aid":"0","scy":"auto","net":"tcp","type":"none","host":"","tls":"tls"}' | base64 -w 0)
            echo "🔗 VMESS 链接如下："
            echo "vmess://$VMESS"
          else
            echo "⚠️ 未找到应用路由，请检查部署状态。"
          fi
